/* eslint-disable max-lines */
export const TUX_COMPONENT_DOCS_V1 = [
  {
    displayName: 'TUXAccordion',
    props: {
      items: {
        defaultValue: null,
        description:
          'Array of accordion props data.\n{ itemKey: string, title: string, leading?: React.ReactNode, text?: string, content?: React.ReactNode, disabled?: boolean }',
        name: 'items',
        required: true,
        type: { name: 'TUXAccordionItemProps[]' },
      },
      activeKey: {
        defaultValue: null,
        description: 'Specify the current active accordion item by key.',
        name: 'activeKey',
        required: false,
        type: { name: 'string[]' },
      },
      defaultActiveKey: {
        defaultValue: null,
        description: 'Specify the initial active accordion item.',
        name: 'defaultActiveKey',
        required: false,
        type: { name: 'string[]' },
      },
      multiple: {
        defaultValue: { value: 'false' },
        description: 'Whether multiple Accordion items can be expanded at the same time.',
        name: 'multiple',
        required: false,
        type: { name: 'boolean' },
      },
      onChange: {
        defaultValue: null,
        description: 'Callback triggered when active accordion item changed.',
        name: 'onChange',
        required: false,
        type: { name: '((activeKey: string[]) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXActionSheet',
    props: {
      title: {
        defaultValue: null,
        description: 'Title of the action sheet.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      cancelText: {
        defaultValue: { value: '"Cancel"' },
        description: "Text content of the action sheet's cancel button. Only present in the text variant.",
        name: 'cancelText',
        required: false,
        type: { name: 'string' },
      },
      actionType: {
        defaultValue: null,
        description: 'Specifies which type of action sheet to use. Either text or icon.',
        name: 'actionType',
        required: true,
        type: { name: '"text" | "icon"' },
      },
      actions: {
        defaultValue: null,
        description: 'The actions to be displayed in the action sheet.',
        name: 'actions',
        required: true,
        type: { name: 'TUXActionItemProps[]' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXActionItem',
    props: {
      text: {
        defaultValue: null,
        description: 'Text of the action button.',
        name: 'text',
        required: true,
        type: { name: 'string' },
      },
      subtext: {
        defaultValue: null,
        description: 'Subtext of the action button.',
        name: 'subtext',
        required: false,
        type: { name: 'string' },
      },
      icon: {
        defaultValue: null,
        description: 'Icon of the action button.',
        name: 'icon',
        required: false,
        type: { name: 'ReactNode' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the action button is disabled.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      textDisplay: {
        defaultValue: { value: 'truncate' },
        description: 'The text overflow behavior of the action button.',
        name: 'textDisplay',
        required: false,
        type: { name: '"truncate" | "lineBreak"' },
      },
      themePreset: {
        defaultValue: null,
        description: 'Theme preset of the action button.',
        name: 'themePreset',
        required: true,
        type: { name: '"primary" | "destructive"' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click handler of the action button.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXApp',
    props: {
      theme: {
        defaultValue: null,
        description: 'The theme for the entire project',
        name: 'theme',
        required: true,
        type: { name: '"light" | "dark"' },
      },
      textDirection: {
        defaultValue: null,
        description: "The text direction for the entire project, the default value is 'ltr'",
        name: 'textDirection',
        required: false,
        type: { name: '"ltr" | "rtl"' },
      },
      platform: {
        defaultValue: null,
        description: 'The platform information.',
        name: 'platform',
        required: true,
        type: { name: '"iOS" | "android" | "desktop"' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXAvatar',
    props: {
      src: {
        defaultValue: null,
        description: 'Source image of the avatar.',
        name: 'src',
        required: false,
        type: { name: 'string' },
      },
      alt: {
        defaultValue: null,
        description: 'Alternative texts to be displayed when the image fails to load.',
        name: 'alt',
        required: false,
        type: { name: 'string' },
      },
      sizePreset: {
        defaultValue: { value: '"medium"' },
        description: 'Preset sizes of the avatar.',
        name: 'sizePreset',
        required: false,
        type: { name: '"tiny" | "small" | "medium" | "large"' },
      },
      size: {
        defaultValue: null,
        description: 'Size of the avatar.',
        name: 'size',
        required: false,
        type: { name: 'number' },
      },
      contentType: {
        defaultValue: { value: '"image"' },
        description: 'The content type of the avatar.',
        name: 'contentType',
        required: false,
        type: { name: '"image" | "placeholder"' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the avatar, set this to make the avatar to be interactive.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXButton',
    props: {
      text: {
        defaultValue: null,
        description: 'The text content inside the button.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      themePreset: {
        defaultValue: { value: '"primary"' },
        description: 'Preset themes of the button.',
        name: 'themePreset',
        required: false,
        type: { name: '"primary" | "secondary"' },
      },
      shapePreset: {
        defaultValue: null,
        description:
          'Preset shapes of the button. when sizePreset is "tiny" & "small", the shape will be "capsule", otherwise, the shape will be "normal". You can change the default behavior by setting the shapePreset prop.',
        name: 'shapePreset',
        required: false,
        type: { name: '"normal" | "capsule" | "borderless"' },
      },
      sizePreset: {
        defaultValue: { value: '"medium"' },
        description: 'Preset sizes of the button, corresponding to different heights.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "large" | "medium" | "tiny"' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Icon displayed before the text.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Icon displayed after the text.',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      loading: {
        defaultValue: null,
        description: 'Whether the button is in a loading state.',
        name: 'loading',
        required: false,
        type: { name: 'boolean' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking the button.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      block: {
        defaultValue: { value: 'false' },
        description: 'Whether the button should take up the full width of its container.',
        name: 'block',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the button.',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) & MouseEventHandler<HTMLButtonElement>)',
        },
      },
      onDisabledClick: {
        defaultValue: null,
        description: 'Event handler for clicks when the button is in loading or disabled state.',
        name: 'onDisabledClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the button.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Custom minimum width of the button.',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Custom maximum width of the button.',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      height: {
        defaultValue: null,
        description: 'Custom height of the button.',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      backgroundColor: {
        defaultValue: null,
        description: 'Custom background color of the button.',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      textColor: {
        defaultValue: null,
        description: 'Custom text color of the button.',
        name: 'textColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      borderStyle: {
        defaultValue: null,
        description: 'Custom border styles of the button.',
        name: 'borderStyle',
        required: false,
        type: { name: 'string' },
      },
      borderColor: {
        defaultValue: null,
        description: 'Custom border color of the button.',
        name: 'borderColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      borderWidth: {
        defaultValue: null,
        description: 'Custom border width of the button.',
        name: 'borderWidth',
        required: false,
        type: { name: 'string' },
      },
      paddingInline: {
        defaultValue: null,
        description: 'Custom padding-inline of the button.',
        name: 'paddingInline',
        required: false,
        type: { name: 'string' },
      },
      hoveredColor: {
        defaultValue: null,
        description: 'Text color to be displayed when the button is hovered in borderless shape.',
        name: 'hoveredColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXCalendar',
    props: {
      displayYearMonth: {
        defaultValue: null,
        description: 'The year and month to display.\n@example "2025-03"',
        name: 'displayYearMonth',
        required: true,
        type: {
          name: '`${number}${number}${number}${number}-01` | `${number}${number}${number}${number}-02` | `${number}${number}${number}${number}-03` | `${number}${number}${number}${number}-04` | `${number}${number}${number}${number}-05` | `${number}${number}${number}${number}-06` | ... 5 more ... | `${number}${number}${number}${number...',
        },
      },
      showMonth: {
        defaultValue: null,
        description: 'Whether to show the year and month',
        name: 'showMonth',
        required: false,
        type: { name: 'boolean' },
      },
      locale: {
        defaultValue: null,
        description: 'The locale to use.\n@example "en-US"',
        name: 'locale',
        required: false,
        type: { name: 'string' },
      },
      showToday: {
        defaultValue: { value: 'false' },
        description: 'Whether to show today.',
        name: 'showToday',
        required: false,
        type: { name: 'boolean' },
      },
      disableDate: {
        defaultValue: null,
        description:
          'The function to disable a date.\n@example (date: Date) => date.getDay() === 0 || date.getDay() === 6',
        name: 'disableDate',
        required: false,
        type: { name: '((date: Date) => boolean)' },
      },
      activeDates: {
        defaultValue: null,
        description: 'The active dates.\n@example [new Date(2025, 2, 12), new Date(2025, 2, 20)]',
        name: 'activeDates',
        required: false,
        type: { name: 'TDateValue' },
      },
      onDayClick: {
        defaultValue: null,
        description: 'The function to handle day click.\n@example (date: Date) => {\nconsole.log(date);\n}',
        name: 'onDayClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, date: Date) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXCenterToast',
    props: {
      zIndex: {
        defaultValue: { value: '2300' },
        description: 'Z-index of the center toast.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root to which the center toast are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      textDirection: {
        defaultValue: null,
        description: 'The text direction for the specific scope.',
        name: 'textDirection',
        required: false,
        type: { name: '"ltr" | "rtl"' },
      },
      text: {
        defaultValue: null,
        description: 'Text to be displayed under the top icon.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      icon: {
        defaultValue: null,
        description: 'Top icon of the center toast.',
        name: 'icon',
        required: false,
        type: { name: 'ReactNode' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Controls whether the center toast is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback triggered when the center toast is shown or hidden.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXCenterToastView',
    props: {
      text: {
        defaultValue: null,
        description: 'Text to be displayed under the top icon.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      icon: {
        defaultValue: null,
        description: 'Top icon of the center toast.',
        name: 'icon',
        required: false,
        type: { name: 'ReactNode' },
      },
      showCloseButton: {
        defaultValue: null,
        description: 'Whether to show the close button or not.',
        name: 'showCloseButton',
        required: false,
        type: { name: 'boolean' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Controls whether the center toast is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback triggered when the center toast is shown or hidden.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXCheckbox',
    props: {
      shapePreset: {
        defaultValue: { value: '"circle"' },
        description: 'Preset shapes of the checkbox.',
        name: 'shapePreset',
        required: false,
        type: { name: '"square" | "circle"' },
      },
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the checkbox.',
        name: 'sizePreset',
        required: false,
        type: { name: '"large" | "small"' },
      },
      indeterminate: {
        defaultValue: null,
        description: 'Whether the checkbox is in an indeterminate state.',
        name: 'indeterminate',
        required: false,
        type: { name: 'boolean' },
      },
      name: {
        defaultValue: null,
        description:
          'Name of the data that the checkbox is associated with.\nCheckboxes with the same name are grouped and control the same set of data.',
        name: 'name',
        required: true,
        type: { name: 'string' },
      },
      value: {
        defaultValue: null,
        description:
          'Value that the checkbox option represents.\nThis should be unique for all checkboxes with the same name.',
        name: 'value',
        required: true,
        type: { name: 'string' },
      },
      id: {
        defaultValue: null,
        description: 'Identifier for the checkbox input.',
        name: 'id',
        required: false,
        type: { name: 'string' },
      },
      checked: {
        defaultValue: null,
        description:
          "Controls the checking state of the checkbox.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'checked',
        required: false,
        type: { name: 'boolean' },
      },
      defaultChecked: {
        defaultValue: null,
        description: 'Controls the default checking state of the checkbox.\nUses this prop in an uncontrolled mode.',
        name: 'defaultChecked',
        required: false,
        type: { name: 'boolean' },
      },
      onChange: {
        defaultValue: null,
        description:
          "Change event handler of the checkbox.\nUses this prop with 'checked' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: { name: '((e: ChangeEvent<HTMLInputElement>, checked: boolean) => void)' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the checkbox is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the checkbox is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      backgroundColor: {
        defaultValue: null,
        description: 'Custom checking background color of the checkbox.',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXChip',
    props: {
      itemKey: {
        defaultValue: null,
        description: 'Unique identifier for the chip.',
        name: 'itemKey',
        required: true,
        type: { name: 'string' },
      },
      text: {
        defaultValue: null,
        description: 'Text to be displayed in the chip.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      leading: {
        defaultValue: null,
        description: 'Custom leading action area of the chip.',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailing: {
        defaultValue: null,
        description: 'Custom trailing action area of the chip.',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      selected: {
        defaultValue: { value: '"false"' },
        description: 'The selected state of the chip.\n*',
        name: 'selected',
        required: false,
        type: { name: 'boolean' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the chip is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onChange: {
        defaultValue: null,
        description: 'The change handler of the chip.',
        name: 'onChange',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, selected: boolean, selectedKey: string) => void)' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Custom min-width of the chip.',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Custom max-width of the chip.',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      shapePreset: {
        defaultValue: { value: '"capsule"' },
        description: 'Preset shapes of the chip.',
        name: 'shapePreset',
        required: false,
        type: { name: '"capsule" | "rectangle"' },
      },
      multiSelect: {
        defaultValue: null,
        description: 'Whether the chip is in a multi-select mode.',
        name: 'multiSelect',
        required: false,
        type: { name: 'boolean' },
      },
      quiet: {
        defaultValue: null,
        description: 'Whether the chip is in a quiet mode.',
        name: 'quiet',
        required: false,
        type: { name: 'boolean' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXChipGroup',
    props: {
      items: {
        defaultValue: null,
        description: 'Chip items of the chip group.',
        name: 'items',
        required: true,
        type: { name: 'TUXChipBaseProps[]' },
      },
      fitContent: {
        defaultValue: { value: 'true' },
        description: 'Whether the chip group hugs the content.',
        name: 'fitContent',
        required: false,
        type: { name: 'boolean' },
      },
      defaultSelectedKeys: {
        defaultValue: null,
        description: 'Default selected keys of the chip group, used in an uncontrolled mode.',
        name: 'defaultSelectedKeys',
        required: false,
        type: { name: 'string[]' },
      },
      selectedKeys: {
        defaultValue: null,
        description: 'Selected keys of the chip group, used in a controlled mode.',
        name: 'selectedKeys',
        required: false,
        type: { name: 'string[]' },
      },
      onChange: {
        defaultValue: null,
        description:
          'Change event handler of the chip group.\nTriggered when selected states change under the controlled mode.',
        name: 'onChange',
        required: false,
        type: { name: '((selectedKeys: string[]) => void)' },
      },
      configForAll: {
        defaultValue: null,
        description: 'config for all items in the chip group.',
        name: 'configForAll',
        required: false,
        type: { name: 'TUXChipSharedProps' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXConfigure',
    props: {
      theme: {
        defaultValue: null,
        description: 'The theme for the specific scope.',
        name: 'theme',
        required: false,
        type: { name: '"light" | "dark"' },
      },
      textDirection: {
        defaultValue: null,
        description: 'The text direction for the specific scope.',
        name: 'textDirection',
        required: false,
        type: { name: '"ltr" | "rtl"' },
      },
      platform: {
        defaultValue: null,
        description: 'The platform information.',
        name: 'platform',
        required: false,
        type: { name: '"iOS" | "android" | "desktop"' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDatePicker',
    props: {
      formatTriggerValue: {
        defaultValue: null,
        description: 'Customized the display string on the trigger element.',
        name: 'formatTriggerValue',
        required: false,
        type: { name: '((value: TDateValue) => string)' },
      },
      confirmText: {
        defaultValue: { value: "'Confirm'" },
        description: 'Confirm button text.',
        name: 'confirmText',
        required: false,
        type: { name: 'string' },
      },
      renderFooter: {
        defaultValue: null,
        description: 'Customized the footer.',
        name: 'renderFooter',
        required: false,
        type: {
          name: '((innerData: { internalValue: TDateValue; setInternalValue: (dateValue: TDateValue) => void; isInternalValueValid: boolean; visible: boolean; setVisible: (visible: boolean) => void; }) => ReactNode)',
        },
      },
      customTrigger: {
        defaultValue: null,
        description: 'Customized the trigger element.',
        name: 'customTrigger',
        required: false,
        type: { name: 'ReactElement<any, string | JSXElementConstructor<any>>' },
      },
      disableDate: {
        defaultValue: null,
        description:
          'The function to disable a date.\n@example (date: Date) => date.getDay() === 0 || date.getDay() === 6',
        name: 'disableDate',
        required: false,
        type: { name: '((date: Date) => boolean)' },
      },
      onDayClick: {
        defaultValue: null,
        description: 'The function to handle day click.\n@example (date: Date) => {\nconsole.log(date);\n}',
        name: 'onDayClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, date: Date) => void)' },
      },
      mode: {
        defaultValue: { value: "'single'" },
        description: 'Date picker mode.',
        name: 'mode',
        required: false,
        type: { name: '"single" | "range"' },
      },
      value: {
        defaultValue: null,
        description: 'confirmed value, which is [] | [Date] | [Date, Date].',
        name: 'value',
        required: true,
        type: { name: 'TDateValue' },
      },
      onValueChange: {
        defaultValue: null,
        description: 'Value change callback.',
        name: 'onValueChange',
        required: true,
        type: { name: '(dateValue: TDateValue) => void' },
      },
      selectableDateRange: {
        defaultValue: null,
        description: 'Selectable date range.',
        name: 'selectableDateRange',
        required: false,
        type: { name: '[Date, Date]' },
      },
      onConfirm: {
        defaultValue: null,
        description: 'Confirm callback.',
        name: 'onConfirm',
        required: false,
        type: { name: '((internalValue: TDateValue) => void)' },
      },
      locale: {
        defaultValue: null,
        description: 'The locale to use.\n@example "en-US"',
        name: 'locale',
        required: false,
        type: { name: 'string' },
      },
      showToday: {
        defaultValue: { value: 'false' },
        description: 'Whether to show today.',
        name: 'showToday',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback when the popover is open or closed',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      triggerMode: {
        defaultValue: { value: "'click'" },
        description: "Trigger mode, can be one of the following: 'click' | 'hover' | 'focus'",
        name: 'triggerMode',
        required: false,
        type: { name: 'TTriggerMode | TTriggerMode[]' },
      },
      placement: {
        defaultValue: { value: "'BlockStart'" },
        description:
          "Placement of the popover relative to the trigger element, the value can be one of the following:\n'BlockStart' | 'BlockStart-Start' | 'BlockStart-End' | 'BlockEnd' | 'BlockEnd-Start' | 'BlockEnd-End' | 'InlineStart' | 'InlineStart-Start' | 'InlineStart-End' | 'InlineEnd' | 'InlineEnd-Start' | 'InlineEnd-End'",
        name: 'placement',
        required: false,
        type: { name: 'TPopoverPlacement' },
      },
      root: {
        defaultValue: { value: 'null' },
        description:
          'Root element of the popover, default is null, which means the popover will be rendered in the body element',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the popover is open',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus popover when open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether to dismiss the popover when click outside',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      autoFlip: {
        defaultValue: { value: 'false' },
        description: 'Whether to flip the popover when it is out of the viewport',
        name: 'autoFlip',
        required: false,
        type: { name: 'boolean' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Custom minimum width of the popover.',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Custom maximum width of the popover.',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Custom minimum height of the popover.',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Custom maximum height of the popover.',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2200' },
        description: 'Z-index of the popover',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      offsetOptions: {
        defaultValue: null,
        description: 'Offset between the trigger element and the popover',
        name: 'offsetOptions',
        required: false,
        type: { name: 'OffsetOptions' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'useDatePicker',
    props: {
      mode: {
        defaultValue: { value: "'single'" },
        description: 'Date picker mode.',
        name: 'mode',
        required: false,
        type: { name: '"single" | "range"' },
      },
      value: {
        defaultValue: null,
        description: 'confirmed value, which is [] | [Date] | [Date, Date].',
        name: 'value',
        required: true,
        type: { name: 'TDateValue' },
      },
      onValueChange: {
        defaultValue: null,
        description: 'Value change callback.',
        name: 'onValueChange',
        required: true,
        type: { name: '(dateValue: TDateValue) => void' },
      },
      selectableDateRange: {
        defaultValue: null,
        description: 'Selectable date range.',
        name: 'selectableDateRange',
        required: false,
        type: { name: '[Date, Date]' },
      },
      onConfirm: {
        defaultValue: null,
        description: 'Confirm callback.',
        name: 'onConfirm',
        required: false,
        type: { name: '((internalValue: TDateValue) => void)' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: '',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      disableDate: {
        defaultValue: null,
        description:
          'The function to disable a date.\n@example (date: Date) => date.getDay() === 0 || date.getDay() === 6',
        name: 'disableDate',
        required: false,
        type: { name: '((date: Date) => boolean)' },
      },
      onDayClick: {
        defaultValue: null,
        description: 'The function to handle day click.\n@example (date: Date) => {\nconsole.log(date);\n}',
        name: 'onDayClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, date: Date) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'dateValueToString',
    props: {
      dateValue: {
        defaultValue: null,
        description: '',
        name: 'dateValue',
        required: false,
        type: { name: 'TDateValue' },
      },
      locale: { defaultValue: null, description: '', name: 'locale', required: false, type: { name: 'string' } },
      mode: { defaultValue: null, description: '', name: 'mode', required: true, type: { name: '"single" | "range"' } },
    },
    methods: {},
  },
  {
    displayName: 'TUXDatePickerSheet',
    props: {
      sheetRange: {
        defaultValue: null,
        description: 'Date range of the calendar sheet.',
        name: 'sheetRange',
        required: false,
        type: { name: '[Date, Date]' },
      },
      navbar: {
        defaultValue: null,
        description: 'TUXNavBar component.',
        name: 'navbar',
        required: false,
        type: { name: 'ReactNode' },
      },
      renderPrompt: {
        defaultValue: null,
        description: 'render prompt.',
        name: 'renderPrompt',
        required: false,
        type: { name: '((innerData: { internalValue: TDateValue; }) => ReactNode)' },
      },
      confirmText: {
        defaultValue: { value: "'Confirm'" },
        description: 'Confirm button text.',
        name: 'confirmText',
        required: false,
        type: { name: 'string' },
      },
      renderFooter: {
        defaultValue: null,
        description: 'Customized the footer.',
        name: 'renderFooter',
        required: false,
        type: {
          name: '((innerData: { internalValue: TDateValue; setInternalValue: (dateValue: TDateValue) => void; isInternalValueValid: boolean; }) => ReactNode)',
        },
      },
      mode: {
        defaultValue: { value: "'single'" },
        description: 'Date picker mode.',
        name: 'mode',
        required: false,
        type: { name: '"single" | "range"' },
      },
      value: {
        defaultValue: null,
        description: 'confirmed value, which is [] | [Date] | [Date, Date].',
        name: 'value',
        required: true,
        type: { name: 'TDateValue' },
      },
      onValueChange: {
        defaultValue: null,
        description: 'Value change callback.',
        name: 'onValueChange',
        required: true,
        type: { name: '(dateValue: TDateValue) => void' },
      },
      selectableDateRange: {
        defaultValue: null,
        description: 'Selectable date range.',
        name: 'selectableDateRange',
        required: false,
        type: { name: '[Date, Date]' },
      },
      onConfirm: {
        defaultValue: null,
        description: 'Confirm callback.',
        name: 'onConfirm',
        required: false,
        type: { name: '((internalValue: TDateValue) => void)' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '(((visible: boolean) => void) & ((visible: boolean) => void))' },
      },
      disableDate: {
        defaultValue: null,
        description:
          'The function to disable a date.\n@example (date: Date) => date.getDay() === 0 || date.getDay() === 6',
        name: 'disableDate',
        required: false,
        type: { name: '((date: Date) => boolean)' },
      },
      onDayClick: {
        defaultValue: null,
        description: 'The function to handle day click.\n@example (date: Date) => {\nconsole.log(date);\n}',
        name: 'onDayClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, date: Date) => void)' },
      },
      locale: {
        defaultValue: null,
        description: 'The locale to use.\n@example "en-US"',
        name: 'locale',
        required: false,
        type: { name: 'string' },
      },
      showToday: {
        defaultValue: { value: 'false' },
        description: 'Whether to show today.',
        name: 'showToday',
        required: false,
        type: { name: 'boolean' },
      },
      position: {
        defaultValue: { value: '"bottom"' },
        description: 'Direction in which the sheet is displayed.',
        name: 'position',
        required: false,
        type: { name: '"bottom" | "left" | "right"' },
      },
      heightModePreset: {
        defaultValue: { value: '"auto"' },
        description: 'Preset height modes of the sheet if position = "bottom".',
        name: 'heightModePreset',
        required: false,
        type: { name: '"auto" | "fixed"' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether clicking the overlay closes the sheet.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      height: {
        defaultValue: null,
        description: 'Height of the sheet, only valid if position = "bottom"',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Minimum height of the sheet, only valid if position = "bottom"',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Maximum height of the sheet, only valid if position = "bottom"',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Width of the sheet, only valid if position = "left" or "right"',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Minimum width of the sheet, only valid if position = "left" or "right"',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Maximum width of the sheet, only valid if position = "left" or "right"',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      marginBottom: {
        defaultValue: null,
        description: 'Margin-bottom value of the sheet.',
        name: 'marginBottom',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2000' },
        description: 'Z-index of the sheet.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      overlayBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the overlay.',
        name: 'overlayBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      sheetBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the sheet container.',
        name: 'sheetBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDatePickerSheetContent',
    props: {
      sheetRange: {
        defaultValue: null,
        description: 'Date range of the calendar sheet.',
        name: 'sheetRange',
        required: false,
        type: { name: '[Date, Date]' },
      },
      navbar: {
        defaultValue: null,
        description: 'TUXNavBar component.',
        name: 'navbar',
        required: false,
        type: { name: 'ReactNode' },
      },
      renderPrompt: {
        defaultValue: null,
        description: 'render prompt.',
        name: 'renderPrompt',
        required: false,
        type: { name: '((innerData: { internalValue: TDateValue; }) => ReactNode)' },
      },
      confirmText: {
        defaultValue: { value: "'Confirm'" },
        description: 'Confirm button text.',
        name: 'confirmText',
        required: false,
        type: { name: 'string' },
      },
      renderFooter: {
        defaultValue: null,
        description: 'Customized the footer.',
        name: 'renderFooter',
        required: false,
        type: {
          name: '((innerData: { internalValue: TDateValue; setInternalValue: (dateValue: TDateValue) => void; isInternalValueValid: boolean; }) => ReactNode)',
        },
      },
      mode: {
        defaultValue: { value: "'single'" },
        description: 'Date picker mode.',
        name: 'mode',
        required: false,
        type: { name: '"single" | "range"' },
      },
      value: {
        defaultValue: null,
        description: 'confirmed value, which is [] | [Date] | [Date, Date].',
        name: 'value',
        required: true,
        type: { name: 'TDateValue' },
      },
      onValueChange: {
        defaultValue: null,
        description: 'Value change callback.',
        name: 'onValueChange',
        required: true,
        type: { name: '(dateValue: TDateValue) => void' },
      },
      selectableDateRange: {
        defaultValue: null,
        description: 'Selectable date range.',
        name: 'selectableDateRange',
        required: false,
        type: { name: '[Date, Date]' },
      },
      onConfirm: {
        defaultValue: null,
        description: 'Confirm callback.',
        name: 'onConfirm',
        required: false,
        type: { name: '((internalValue: TDateValue) => void)' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: '',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      disableDate: {
        defaultValue: null,
        description:
          'The function to disable a date.\n@example (date: Date) => date.getDay() === 0 || date.getDay() === 6',
        name: 'disableDate',
        required: false,
        type: { name: '((date: Date) => boolean)' },
      },
      onDayClick: {
        defaultValue: null,
        description: 'The function to handle day click.\n@example (date: Date) => {\nconsole.log(date);\n}',
        name: 'onDayClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, date: Date) => void)' },
      },
      locale: {
        defaultValue: null,
        description: 'The locale to use.\n@example "en-US"',
        name: 'locale',
        required: false,
        type: { name: 'string' },
      },
      showToday: {
        defaultValue: { value: 'false' },
        description: 'Whether to show today.',
        name: 'showToday',
        required: false,
        type: { name: 'boolean' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDialogView',
    props: {
      title: {
        defaultValue: null,
        description: 'Title of the dialog view.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      message: {
        defaultValue: null,
        description: 'Message of the dialog view.',
        name: 'message',
        required: false,
        type: { name: 'string' },
      },
      image: {
        defaultValue: null,
        description: 'Top image of the dialog view.',
        name: 'image',
        required: false,
        type: { name: 'ReactNode' },
      },
      imageType: {
        defaultValue: null,
        description: 'Image type of the dialog view.',
        name: 'imageType',
        required: false,
        type: { name: '"banner" | "icon" | "illustration"' },
      },
      accessory: {
        defaultValue: null,
        description: 'The accessory part of the dialog view.',
        name: 'accessory',
        required: false,
        type: { name: 'ReactNode' },
      },
      showCloseButton: {
        defaultValue: null,
        description: 'Whether to have close button or not.',
        name: 'showCloseButton',
        required: false,
        type: { name: 'boolean' },
      },
      closeButtonColor: {
        defaultValue: null,
        description: 'Custom color of the close button.',
        name: 'closeButtonColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      onClose: {
        defaultValue: null,
        description: 'The handler of dismiss event, used in close button.',
        name: 'onClose',
        required: false,
        type: { name: '((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)' },
      },
      actionType: {
        defaultValue: null,
        description: 'Action type of the dialog view.',
        name: 'actionType',
        required: true,
        type: { name: '"button" | "text"' },
      },
      footerActions: {
        defaultValue: null,
        description: 'Footer actions of the dialog view.',
        name: 'footerActions',
        required: true,
        type: {
          name: '[TUXDialogViewPrimaryButtonActionProps] | [TUXDialogViewPrimaryButtonActionProps, TUXDialogViewSecondaryButtonActionProps] | TUXDialogViewTextActionProps[]',
        },
      },
      actionDirection: {
        defaultValue: null,
        description: "Action direction of the dialog view. (Applied when actionType = 'text')",
        name: 'actionDirection',
        required: false,
        type: { name: '"horizontal" | "vertical"' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDialogViewFooter',
    props: {
      actionType: {
        defaultValue: null,
        description: 'Action type of the dialog view.',
        name: 'actionType',
        required: true,
        type: { name: '"button" | "text"' },
      },
      footerActions: {
        defaultValue: null,
        description: 'Footer actions of the dialog view.',
        name: 'footerActions',
        required: true,
        type: {
          name: '[TUXDialogViewPrimaryButtonActionProps] | [TUXDialogViewPrimaryButtonActionProps, TUXDialogViewSecondaryButtonActionProps] | TUXDialogViewTextActionProps[]',
        },
      },
      actionDirection: {
        defaultValue: null,
        description: "Action direction of the dialog view. (Applied when actionType = 'text')",
        name: 'actionDirection',
        required: false,
        type: { name: '"horizontal" | "vertical"' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDialogViewPrimaryButtonAction',
    props: {
      themePreset: {
        defaultValue: null,
        description: '',
        name: 'themePreset',
        required: false,
        type: { name: '"primary" | "secondary"' },
      },
      shapePreset: {
        defaultValue: null,
        description: '',
        name: 'shapePreset',
        required: false,
        type: { name: '"normal" | "capsule"' },
      },
      text: {
        defaultValue: null,
        description: 'The text content inside the button.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking the button.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the button.',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) & MouseEventHandler<HTMLButtonElement>)',
        },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDialogViewSecondaryButtonAction',
    props: {
      themePreset: {
        defaultValue: null,
        description: '',
        name: 'themePreset',
        required: false,
        type: { name: '"secondary" | "destructive"' },
      },
      text: {
        defaultValue: null,
        description: 'The text content inside the button.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking the button.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the button.',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) & MouseEventHandler<HTMLButtonElement>)',
        },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXDialogViewTextAction',
    props: {
      text: {
        defaultValue: null,
        description: 'The text content inside the text action.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      themePreset: {
        defaultValue: { value: '"primary"' },
        description: 'Preset themes of the text action.',
        name: 'themePreset',
        required: false,
        type: { name: '"primary" | "secondary" | "destructive"' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking text action.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the text action.',
        name: 'onClick',
        required: false,
        type: { name: 'MouseEventHandler<HTMLButtonElement>' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXFormItemFooter',
    props: {
      message: {
        defaultValue: null,
        description: 'Message of the input footer.',
        name: 'message',
        required: false,
        type: { name: 'string' },
      },
      maxLengthExceededMessage: {
        defaultValue: null,
        description: 'Message displayed when counterLength exceeds counterMaxLength.',
        name: 'maxLengthExceededMessage',
        required: false,
        type: { name: 'string' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the input footer is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      messageIcon: {
        defaultValue: null,
        description: 'Custom message icon of the input footer, if set to null, there is no message icon',
        name: 'messageIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      showCounter: {
        defaultValue: null,
        description: 'Whether to show the counter or not.',
        name: 'showCounter',
        required: false,
        type: { name: 'boolean' },
      },
      counterLength: {
        defaultValue: null,
        description: 'The length of the input value for the counter.',
        name: 'counterLength',
        required: false,
        type: { name: 'number' },
      },
      counterMaxLength: {
        defaultValue: null,
        description: 'The max length of the input value for the counter.',
        name: 'counterMaxLength',
        required: false,
        type: { name: 'number' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXFormItemHeader',
    props: {
      title: {
        defaultValue: null,
        description: 'Title of the input label.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      description: {
        defaultValue: null,
        description: 'The detailed description of the input label.',
        name: 'description',
        required: false,
        type: { name: 'string' },
      },
      showRequiredMark: {
        defaultValue: null,
        description: 'Whether the input label has a required mark or not.',
        name: 'showRequiredMark',
        required: false,
        type: { name: 'boolean' },
      },
      infoIcon: {
        defaultValue: null,
        description: 'Info icon of the input label. Usually used with tooltip/sheet to hide more information.',
        name: 'infoIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      optionalText: {
        defaultValue: null,
        description: 'Additional descriptive text of the input label.',
        name: 'optionalText',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the input label.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  { displayName: 'TUXFormItem', props: {}, methods: {} },
  {
    displayName: 'TUXFormView',
    props: {
      title: {
        defaultValue: null,
        description: 'Title of the form view.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      subtitle: {
        defaultValue: null,
        description: 'Subtitle of the form view.',
        name: 'subtitle',
        required: false,
        type: { name: 'string' },
      },
      infoIcon: {
        defaultValue: null,
        description: 'Info icon of the form view. Usually used with tooltip/sheet to hide more information.',
        name: 'infoIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      showTopSeparator: {
        defaultValue: null,
        description: 'Whether to have the top separator or not.',
        name: 'showTopSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      message: {
        defaultValue: null,
        description: 'Message of the form view.',
        name: 'message',
        required: false,
        type: { name: 'string' },
      },
      messageIcon: {
        defaultValue: null,
        description: 'Custom message icon of the form view, if set to null, there is no message icon',
        name: 'messageIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the form view is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXGrid',
    props: {
      columns: {
        defaultValue: { value: '12' },
        description: 'How many columns you want to separate, support responsive',
        name: 'columns',
        required: false,
        type: { name: 'number | TCommonResponsiveConfig<number>' },
      },
      gap: {
        defaultValue: { value: '16' },
        description: 'Set the gap between each cell, support responsive',
        name: 'gap',
        required: false,
        type: { name: 'string | number | TCommonResponsiveConfig<string | number>' },
      },
      paddingX: {
        defaultValue: { value: '32' },
        description: 'Set the Horizontal padding, support responsive',
        name: 'paddingX',
        required: false,
        type: { name: 'string | number | TCommonResponsiveConfig<string | number>' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Set the max width of the grid container, support responsive, the default value is unset',
        name: 'maxWidth',
        required: false,
        type: { name: 'string | number | TCommonResponsiveConfig<string | number>' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXGridCell',
    props: {
      span: {
        defaultValue: { value: '1' },
        description: 'How many span this cell want to take, support responsive',
        name: 'span',
        required: false,
        type: { name: 'number | TCommonResponsiveConfig<number>' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
    },
    methods: {},
  },
  { displayName: 'handleSizeValue', props: {}, methods: {} },
  {
    displayName: 'TUXIconButton',
    props: {
      sizePreset: {
        defaultValue: { value: '"tiny"' },
        description: 'Preset sizes of the icon button.',
        name: 'sizePreset',
        required: false,
        type: { name: '"tiny" | "small" | "medium" | "large" | "huge"' },
      },
      icon: {
        defaultValue: null,
        description: 'Icon to be displayed in the middle of the icon button.',
        name: 'icon',
        required: true,
        type: { name: 'ReactNode' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the icon button is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click handler of the icon button.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)' },
      },
      size: {
        defaultValue: null,
        description: 'Size of the icon button.',
        name: 'size',
        required: false,
        type: { name: 'number' },
      },
      backgroundColor: {
        defaultValue: { value: '"UIShapeNeutral4"' },
        description: 'Background color of the icon button.',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXInput',
    props: {
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the input, corresponding to different heights.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "large" | "medium" | "tiny"' },
      },
      value: {
        defaultValue: null,
        description: "Value of the input.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      defaultValue: {
        defaultValue: null,
        description: 'Default initial value of the input.\nUses this prop in an uncontrolled mode.',
        name: 'defaultValue',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      onChange: {
        defaultValue: null,
        description: "Change event handler of the input.\nUses this prop with 'value' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: {
          name: '(((e: ChangeEvent<HTMLInputElement>, value: string) => void) & ChangeEventHandler<HTMLInputElement>)',
        },
      },
      leading: {
        defaultValue: null,
        description: 'Custom leading action area of the input.',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailing: {
        defaultValue: null,
        description: 'Custom trailing action area of the input.',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon of the input.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Trailing icon of the input.',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      leadingText: {
        defaultValue: null,
        description: 'Leading text of the input.',
        name: 'leadingText',
        required: false,
        type: { name: 'string' },
      },
      trailingText: {
        defaultValue: null,
        description: 'Trailing text of the input.',
        name: 'trailingText',
        required: false,
        type: { name: 'string' },
      },
      placeholder: {
        defaultValue: null,
        description: 'A short hint that describes the expected value of the input.',
        name: 'placeholder',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the input is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      showClearButton: {
        defaultValue: null,
        description: 'Whether the input show a clear button or not.',
        name: 'showClearButton',
        required: false,
        type: { name: 'boolean' },
      },
      onClear: {
        defaultValue: null,
        description: 'Clear handler of the input.\nTriggers when the clear button is clicked.',
        name: 'onClear',
        required: false,
        type: { name: '((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)' },
      },
      showMaskButton: {
        defaultValue: null,
        description: 'Whether the input show a mask button or not.',
        name: 'showMaskButton',
        required: false,
        type: { name: 'boolean' },
      },
      status: {
        defaultValue: null,
        description: 'Status of the input.',
        name: 'status',
        required: false,
        type: { name: '"invalid" | "error" | "valid" | "validating"' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the input.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      message: {
        defaultValue: null,
        description: 'Message of the input footer.',
        name: 'message',
        required: false,
        type: { name: 'string' },
      },
      maxLengthExceededMessage: {
        defaultValue: null,
        description: 'Message displayed when counterLength exceeds counterMaxLength.',
        name: 'maxLengthExceededMessage',
        required: false,
        type: { name: 'string' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the input footer is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      messageIcon: {
        defaultValue: null,
        description: 'Custom message icon of the input footer, if set to null, there is no message icon',
        name: 'messageIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      showCounter: {
        defaultValue: null,
        description: 'Whether to show the counter or not.',
        name: 'showCounter',
        required: false,
        type: { name: 'boolean' },
      },
      counterLength: {
        defaultValue: null,
        description: 'The length of the input value for the counter.',
        name: 'counterLength',
        required: false,
        type: { name: 'number' },
      },
      counterMaxLength: {
        defaultValue: null,
        description: 'The max length of the input value for the counter.',
        name: 'counterMaxLength',
        required: false,
        type: { name: 'number' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXInputLike',
    props: {
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the input, corresponding to different heights.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "large" | "medium" | "tiny"' },
      },
      value: {
        defaultValue: null,
        description: "Value of the input.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon of the input.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Trailing icon of the input.',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      leadingText: {
        defaultValue: null,
        description: 'Leading text of the input.',
        name: 'leadingText',
        required: false,
        type: { name: 'string' },
      },
      trailingText: {
        defaultValue: null,
        description: 'Trailing text of the input.',
        name: 'trailingText',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the input is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the input is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      activeMode: {
        defaultValue: null,
        description: 'Controls the active mode.',
        name: 'activeMode',
        required: false,
        type: { name: '"opacity" | "overlay"' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXInputCore',
    props: {
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the input, corresponding to different heights.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "large" | "medium" | "tiny"' },
      },
      value: {
        defaultValue: null,
        description: "Value of the input.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      defaultValue: {
        defaultValue: null,
        description: 'Default initial value of the input.\nUses this prop in an uncontrolled mode.',
        name: 'defaultValue',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      onChange: {
        defaultValue: null,
        description: "Change event handler of the input.\nUses this prop with 'value' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: { name: '(((e: ChangeEvent<HTMLInputElement>) => void) & ChangeEventHandler<HTMLInputElement>)' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon of the input.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Trailing icon of the input.',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      leadingText: {
        defaultValue: null,
        description: 'Leading text of the input.',
        name: 'leadingText',
        required: false,
        type: { name: 'string' },
      },
      trailingText: {
        defaultValue: null,
        description: 'Trailing text of the input.',
        name: 'trailingText',
        required: false,
        type: { name: 'string' },
      },
      placeholder: {
        defaultValue: null,
        description: 'A short hint that describes the expected value of the input.',
        name: 'placeholder',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the input is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      showClearButton: {
        defaultValue: null,
        description: 'Whether the input show a clear button or not.',
        name: 'showClearButton',
        required: false,
        type: { name: 'boolean' },
      },
      onClear: {
        defaultValue: null,
        description: 'Clear handler of the input.\nTriggers when the clear button is clicked.',
        name: 'onClear',
        required: false,
        type: { name: '((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void)' },
      },
      showMaskButton: {
        defaultValue: null,
        description: 'Whether the input show a mask button or not.',
        name: 'showMaskButton',
        required: false,
        type: { name: 'boolean' },
      },
      status: {
        defaultValue: null,
        description: 'Status of the input.',
        name: 'status',
        required: false,
        type: { name: '"error" | "invalid" | "valid" | "validating"' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXInputIconAction',
    props: {
      icon: {
        defaultValue: null,
        description: 'Icon displayed in the action button.',
        name: 'icon',
        required: true,
        type: { name: 'ReactNode' },
      },
      sizePreset: {
        defaultValue: null,
        description: 'Preset sizes of the input action, corresponding to different heights.',
        name: 'sizePreset',
        required: true,
        type: { name: '"small" | "tiny" | "medium" | "large"' },
      },
      color: {
        defaultValue: null,
        description: 'Custom color of the icon.',
        name: 'color',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking the button.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the button.',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) & MouseEventHandler<HTMLButtonElement>)',
        },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXInteractionContainer',
    props: {
      activeMode: {
        defaultValue: null,
        description: 'Controls the active mode.',
        name: 'activeMode',
        required: true,
        type: { name: '"opacity" | "overlay"' },
      },
      activeOverlayMode: {
        defaultValue: { value: '"light"' },
        description: 'Controls the overlay mode of the overlay in the pressed state.',
        name: 'activeOverlayMode',
        required: false,
        type: { name: '"light" | "strong"' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Whether the interaction is disabled.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      role: {
        defaultValue: null,
        description: 'role that tells browser what kind of element it should be treated as',
        name: 'role',
        required: false,
        type: { name: 'string' },
      },
      tabIndex: {
        defaultValue: null,
        description: 'The tab index of the container.',
        name: 'tabIndex',
        required: false,
        type: { name: 'number' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the container.',
        name: 'onClick',
        required: false,
        type: { name: '(((e: MouseEvent<HTMLDivElement, MouseEvent>) => void) & MouseEventHandler<HTMLDivElement>)' },
      },
      as: {
        defaultValue: { value: '"div"' },
        description: 'The element to render as the container.',
        name: 'as',
        required: false,
        type: { name: '"div" | "span"' },
      },
      hoverMode: {
        defaultValue: null,
        description: 'Hover mode of the container.',
        name: 'hoverMode',
        required: false,
        type: { name: '"overlay"' },
      },
      hoveredOverlayColor: {
        defaultValue: null,
        description: 'Hover overlay color of the container. (Applied when hoverMode is overlay)',
        name: 'hoveredOverlayColor',
        required: false,
        type: { name: '"UIShapeNeutral4" | "UIShapeNeutral4Light" | "UIShapeNeutral4Dark"' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXItemPickerView',
    props: {
      header: {
        defaultValue: null,
        description: 'Header of the item picker.',
        name: 'header',
        required: false,
        type: { name: 'ReactNode' },
      },
      footer: {
        defaultValue: null,
        description: 'Footer of the item picker.',
        name: 'footer',
        required: false,
        type: { name: 'ReactNode' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXLink',
    props: {
      text: {
        defaultValue: null,
        description: 'Text to be displayed in the link',
        name: 'text',
        required: true,
        type: { name: 'string' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Icon to be displayed before the text',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Icon to be displayed after the text',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      href: { defaultValue: null, description: 'Link URL', name: 'href', required: false, type: { name: 'string' } },
      onClick: {
        defaultValue: null,
        description: 'Callback function when the link is clicked',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLAnchorElement, MouseEvent>) => void) & MouseEventHandler<HTMLAnchorElement>)',
        },
      },
      typographyPreset: {
        defaultValue: null,
        description: 'Typography preset of the link.',
        name: 'typographyPreset',
        required: false,
        type: { name: 'TTUXTypographyPreset' },
      },
      size: {
        defaultValue: null,
        description: 'Custom size of the link',
        name: 'size',
        required: false,
        type: { name: 'number' },
      },
      weight: {
        defaultValue: null,
        description: 'Custom font weight of the link',
        name: 'weight',
        required: false,
        type: { name: 'number' },
      },
      colorPreset: {
        defaultValue: null,
        description: 'Preset Color of the link',
        name: 'colorPreset',
        required: false,
        type: { name: 'TTUXLinkColorPreset' },
      },
      color: {
        defaultValue: null,
        description: 'Custom Color of the link',
        name: 'color',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the link is disabled',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      display: {
        defaultValue: null,
        description: 'Display type of the link',
        name: 'display',
        required: false,
        type: { name: '"block" | "inline"' },
      },
      hoveredColor: {
        defaultValue: null,
        description: 'Text color to be displayed when the link is hovered',
        name: 'hoveredColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXListCell',
    props: {
      title: {
        defaultValue: null,
        description: 'The title of the list cell.',
        name: 'title',
        required: true,
        type: { name: 'string' },
      },
      trailing: {
        defaultValue: null,
        description: 'Trailing area of the list cell.',
        name: 'trailing',
        required: true,
        type: { name: 'ReactNode' },
      },
      description: {
        defaultValue: null,
        description: 'The description of the list cell.',
        name: 'description',
        required: false,
        type: { name: 'ReactNode' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon of the list cell.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      layout: {
        defaultValue: { value: "'stacked'" },
        description:
          "Provide two kind of layouts: 'stacked' for vertical layout, 'segmented' for left-center-right layout.",
        name: 'layout',
        required: false,
        type: { name: '"stacked" | "segmented"' },
      },
      themePreset: {
        defaultValue: { value: "'normal'" },
        description: 'Preset themes of the list cell.',
        name: 'themePreset',
        required: false,
        type: { name: '"normal" | "destructive"' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Whether the list cell is disabled.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description:
          'Callback event triggered when the list cell is clicked, set this to make the list cell to be interactive.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXListHeader',
    props: {
      title: {
        defaultValue: null,
        description: 'The title of the list header.',
        name: 'title',
        required: true,
        type: { name: 'string' },
      },
      subtitle: {
        defaultValue: null,
        description: 'The description of the list header.',
        name: 'subtitle',
        required: false,
        type: { name: 'string' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Icon displayed after the list header title.',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailing: {
        defaultValue: null,
        description: 'The Trailing area of the list header.',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      sizePreset: {
        defaultValue: { value: "'small'" },
        description: 'Preset sizes corresponding to different typography.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "medium" | "large"' },
      },
      onTitleClick: {
        defaultValue: null,
        description: 'Click event handler for the title.',
        name: 'onTitleClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXListView',
    props: {
      header: {
        defaultValue: null,
        description: 'Header of the list.',
        name: 'header',
        required: false,
        type: { name: 'ReactNode' },
      },
      footer: {
        defaultValue: null,
        description: 'Footer of the list.',
        name: 'footer',
        required: false,
        type: { name: 'ReactNode' },
      },
      showTopSeparator: {
        defaultValue: { value: 'false' },
        description: 'Whether to show the top separator.',
        name: 'showTopSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      grouped: {
        defaultValue: { value: 'false' },
        description: 'Use standard grouped style.',
        name: 'grouped',
        required: false,
        type: { name: 'boolean' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  { displayName: 'TUXLoading', props: {}, methods: {} },
  {
    displayName: 'TUXLoadingProgress',
    props: {
      sizePreset: {
        defaultValue: { value: '"tiny"' },
        description: 'Preset size of the loading progress',
        name: 'sizePreset',
        required: false,
        type: { name: '"tiny" | "small" | "medium" | "large"' },
      },
      progress: {
        defaultValue: null,
        description: 'The progress number of the loading progress( should between 0-100 )',
        name: 'progress',
        required: true,
        type: { name: 'number' },
      },
      progressColor: {
        defaultValue: { value: '"UIShapeNeutral"' },
        description: 'Custom progress stroke color of the loading progress',
        name: 'progressColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXLoadingToast',
    props: {
      text: {
        defaultValue: null,
        description: 'Text to be displayed under the loading image.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether clicking the overlay closes the loading toast.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      zIndex: {
        defaultValue: { value: '2300' },
        description: 'Z-index of the the loading toast.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      showCloseButton: {
        defaultValue: null,
        description: 'Whether to show the close button or not.',
        name: 'showCloseButton',
        required: false,
        type: { name: 'boolean' },
      },
      progress: {
        defaultValue: null,
        description:
          'The progress number of the loading progress( should between 0-100, if it is set, the loading image will be a loading progress )',
        name: 'progress',
        required: false,
        type: { name: 'number' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXMenu',
    props: {
      items: {
        defaultValue: null,
        description: 'items of the menu',
        name: 'items',
        required: true,
        type: { name: '(TUXMenuItemProps | TUXMenuItemGroupProps)[]' },
      },
      configForAll: {
        defaultValue: null,
        description: 'config for all items in the menu',
        name: 'configForAll',
        required: false,
        type: { name: 'TConfigForAll' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'set max height of the menu\nCustom maximum height of the popover.',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      placement: {
        defaultValue: { value: "'BlockEnd-Start'" },
        description: 'where to place the menu',
        name: 'placement',
        required: false,
        type: { name: 'TPopoverPlacement' },
      },
      trigger: {
        defaultValue: null,
        description: 'Trigger element',
        name: 'trigger',
        required: true,
        type: { name: 'ReactElement<any, string | JSXElementConstructor<any>>' },
      },
      triggerMode: {
        defaultValue: { value: "'click'" },
        description: "Trigger mode, can be one of the following: 'click' | 'hover' | 'focus'",
        name: 'triggerMode',
        required: false,
        type: { name: 'TTriggerMode | TTriggerMode[]' },
      },
      root: {
        defaultValue: { value: 'null' },
        description:
          'Root element of the popover, default is null, which means the popover will be rendered in the body element',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the popover is open',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback when the popover is open or closed',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      showArrow: {
        defaultValue: { value: 'false' },
        description: 'Whether to show arrow',
        name: 'showArrow',
        required: false,
        type: { name: 'boolean' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus popover when open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether to dismiss the popover when click outside',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      autoFlip: {
        defaultValue: { value: 'false' },
        description: 'Whether to flip the popover when it is out of the viewport',
        name: 'autoFlip',
        required: false,
        type: { name: 'boolean' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the popover',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Custom minimum width of the popover.',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Custom maximum width of the popover.',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Custom minimum height of the popover.',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2200' },
        description: 'Z-index of the popover',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      offsetOptions: {
        defaultValue: null,
        description: 'Offset between the trigger element and the popover',
        name: 'offsetOptions',
        required: false,
        type: { name: 'OffsetOptions' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXMenuItem',
    props: {
      type: {
        defaultValue: null,
        description: 'use to identify the menu item',
        name: 'type',
        required: true,
        type: { name: '"item"' },
      },
      text: {
        defaultValue: null,
        description: 'text of the menu item',
        name: 'text',
        required: true,
        type: { name: 'string' },
      },
      textDisplay: {
        defaultValue: { value: "'truncate'" },
        description: 'text overflow strategy',
        name: 'textDisplay',
        required: false,
        type: { name: '"truncate" | "lineBreak"' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'leading icon of the menu item',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      leading: {
        defaultValue: null,
        description: 'leading custom element of the menu item',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'trailing icon of the menu item',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailing: {
        defaultValue: null,
        description: 'trailing custom element of the menu item',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      disabled: {
        defaultValue: null,
        description: 'whether the menu item is disabled',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'click event of the menu item',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      themePreset: {
        defaultValue: { value: "'normal'" },
        description: 'theme preset of the menu item',
        name: 'themePreset',
        required: false,
        type: { name: '"normal" | "destructive"' },
      },
      showSeparator: {
        defaultValue: null,
        description: 'whether show separator under this item',
        name: 'showSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      preventCloseOnClick: {
        defaultValue: { value: 'false' },
        description: 'prevent close menu when click',
        name: 'preventCloseOnClick',
        required: false,
        type: { name: 'boolean' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXMenuItemGroup',
    props: {
      type: {
        defaultValue: null,
        description: 'use to identify the menu group',
        name: 'type',
        required: true,
        type: { name: '"group"' },
      },
      groupTitle: {
        defaultValue: null,
        description: 'title of the menu group',
        name: 'groupTitle',
        required: true,
        type: { name: 'string' },
      },
      groupItems: {
        defaultValue: null,
        description: 'items of the menu group',
        name: 'groupItems',
        required: true,
        type: { name: 'TUXMenuItemProps[]' },
      },
      showSeparator: {
        defaultValue: { value: 'true' },
        description: 'use to control separator showing under the menu group',
        name: 'showSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      configForAll: {
        defaultValue: null,
        description: 'config for all items in the menu group',
        name: 'configForAll',
        required: false,
        type: { name: 'TConfigForAll' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXModal',
    props: {
      landscape: {
        defaultValue: { value: 'false' },
        description: 'Whether modal display in landscape mode.',
        name: 'landscape',
        required: false,
        type: { name: 'boolean' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether clicking the overlay closes the modal.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      height: {
        defaultValue: null,
        description: 'Custom height of the modal.',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Custom minimum height of the modal.',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Custom maximum height of the modal.',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Width of the modal',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2100' },
        description: 'Z-index of the modal.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      overlayBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the overlay.',
        name: 'overlayBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      modalBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the modal container.',
        name: 'modalBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXMultiSelectSheet',
    props: {
      defaultValue: {
        defaultValue: null,
        description: 'Specified initial checked value in uncontrolled mode',
        name: 'defaultValue',
        required: false,
        type: { name: 'string[]' },
      },
      value: {
        defaultValue: null,
        description: 'Specified checked value in controlled mode',
        name: 'value',
        required: false,
        type: { name: 'string[]' },
      },
      title: {
        defaultValue: null,
        description: 'Main title of the NavBar in the Sheet.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      showNavBarSeparator: {
        defaultValue: { value: 'false' },
        description: 'Whether to show separator of the NavBar',
        name: 'showNavBarSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      options: {
        defaultValue: null,
        description:
          'Array of single select option data.\nTUXMultiSelectOptionProps: { title: string, description?: string, name: string, value: string, disabled?: boolean}',
        name: 'options',
        required: true,
        type: { name: 'TUXMultiSelectOptionProps[]' },
      },
      submitText: {
        defaultValue: { value: "'Submit'" },
        description: 'Default submit button text.',
        name: 'submitText',
        required: false,
        type: { name: 'string' },
      },
      renderFooter: {
        defaultValue: null,
        description: 'Custom render footer using internal value',
        name: 'renderFooter',
        required: false,
        type: { name: '((props: { value: string[]; updateValue: (value: string[]) => void; }) => ReactNode)' },
      },
      onSubmit: {
        defaultValue: null,
        description: 'Callback event triggered when the submit button clicked.',
        name: 'onSubmit',
        required: false,
        type: { name: '((value: string[]) => void)' },
      },
      onChange: {
        defaultValue: null,
        description: 'Callback event triggered when the checked value changes.',
        name: 'onChange',
        required: false,
        type: { name: '((value: string[]) => void)' },
      },
      onItemClick: {
        defaultValue: null,
        description: 'Callback event triggered when the item clicked.',
        name: 'onItemClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, value?: string) => void)' },
      },
      position: {
        defaultValue: { value: '"bottom"' },
        description: 'Direction in which the sheet is displayed.',
        name: 'position',
        required: false,
        type: { name: '"bottom" | "left" | "right"' },
      },
      heightModePreset: {
        defaultValue: { value: '"auto"' },
        description: 'Preset height modes of the sheet if position = "bottom".',
        name: 'heightModePreset',
        required: false,
        type: { name: '"auto" | "fixed"' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether clicking the overlay closes the sheet.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      height: {
        defaultValue: null,
        description: 'Height of the sheet, only valid if position = "bottom"',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Minimum height of the sheet, only valid if position = "bottom"',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Maximum height of the sheet, only valid if position = "bottom"',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Width of the sheet, only valid if position = "left" or "right"',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Minimum width of the sheet, only valid if position = "left" or "right"',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Maximum width of the sheet, only valid if position = "left" or "right"',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      marginBottom: {
        defaultValue: null,
        description: 'Margin-bottom value of the sheet.',
        name: 'marginBottom',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2000' },
        description: 'Z-index of the sheet.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      overlayBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the overlay.',
        name: 'overlayBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      sheetBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the sheet container.',
        name: 'sheetBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXNavBar',
    props: {
      title: {
        defaultValue: null,
        description: 'Main title of the nav bar.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      subtitle: {
        defaultValue: null,
        description: 'Subtitle of the nav bar.',
        name: 'subtitle',
        required: false,
        type: { name: 'string' },
      },
      customTitle: {
        defaultValue: null,
        description: 'Custom title area of the nav bar.',
        name: 'customTitle',
        required: false,
        type: { name: 'ReactNode' },
      },
      leading: {
        defaultValue: null,
        description: 'Custom leading action area of the nav bar.',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailing: {
        defaultValue: null,
        description: 'Custom trailing action area of the nav bar.',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      showSeparator: {
        defaultValue: { value: 'false' },
        description: 'Whether to show separator below the nav bar.',
        name: 'showSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      backgroundColor: {
        defaultValue: null,
        description: 'Custom background color of the nav bar.',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      zIndex: {
        defaultValue: { value: '1000' },
        description: 'Custom z-index of the nav bar.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      fixed: {
        defaultValue: { value: 'false' },
        description: 'Whether the nav bar position is fixed.',
        name: 'fixed',
        required: false,
        type: { name: 'boolean' },
      },
      showTopSafeArea: {
        defaultValue: { value: 'false' },
        description: 'Whether to include top safe area, usually used on mobile devices.',
        name: 'showTopSafeArea',
        required: false,
        type: { name: 'boolean' },
      },
      topSafeAreaHeight: {
        defaultValue: null,
        description: 'Custom height of the top safe area, usually used on mobile devices.',
        name: 'topSafeAreaHeight',
        required: false,
        type: { name: 'string' },
      },
      showPlaceHolder: {
        defaultValue: { value: 'false' },
        description: 'Whether to include a placeholder, only valid when fixed = true.',
        name: 'showPlaceHolder',
        required: false,
        type: { name: 'boolean' },
      },
      backgroundOpacity: {
        defaultValue: null,
        description: 'Opacity of the background color of the nav bar.',
        name: 'backgroundOpacity',
        required: false,
        type: { name: 'number' },
      },
      titleOpacity: {
        defaultValue: null,
        description: 'Opacity of the title of the nav bar.',
        name: 'titleOpacity',
        required: false,
        type: { name: 'number' },
      },
      heightPreset: {
        defaultValue: { value: '52' },
        description: 'Preset height of the nav bar.',
        name: 'heightPreset',
        required: false,
        type: { name: '52 | 44' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXNavBarIconAction',
    props: {
      icon: {
        defaultValue: null,
        description: 'Icon displayed in the action button',
        name: 'icon',
        required: true,
        type: { name: 'ReactNode' },
      },
      opacity: {
        defaultValue: null,
        description: 'Opacity of the action button',
        name: 'opacity',
        required: false,
        type: { name: 'number' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking the button.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the button.',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) & MouseEventHandler<HTMLButtonElement>)',
        },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXNavBarTextAction',
    props: {
      opacity: {
        defaultValue: null,
        description: 'Opacity of the action button',
        name: 'opacity',
        required: false,
        type: { name: 'number' },
      },
      text: {
        defaultValue: null,
        description: 'The text content inside the button.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Prevents the user from clicking the button.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the button.',
        name: 'onClick',
        required: false,
        type: {
          name: '(((e: MouseEvent<HTMLButtonElement, MouseEvent>) => void) & MouseEventHandler<HTMLButtonElement>)',
        },
      },
      themePreset: {
        defaultValue: { value: '"primary"' },
        description: 'Preset themes of the button.',
        name: 'themePreset',
        required: false,
        type: { name: '"primary" | "secondary"' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXOverlay',
    props: {
      id: {
        defaultValue: null,
        description: 'The id of the overlay.',
        name: 'id',
        required: true,
        type: { name: 'string' },
      },
      floatingContext: {
        defaultValue: null,
        description: 'The context shared with the floating children.',
        name: 'floatingContext',
        required: true,
        type: {
          name: '{ x: number; y: number; placement: Placement; strategy: Strategy; middlewareData: MiddlewareData; isPositioned: boolean; update: () => void; floatingStyles: CSSProperties; ... 7 more ...; elements: ExtendedElements<...>; }',
        },
      },
      children: {
        defaultValue: null,
        description: 'The content of the overlay.',
        name: 'children',
        required: true,
        type: { name: 'ReactElement<any, string | JSXElementConstructor<any>>' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether closes the overlay when clicking inside.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      lockScroll: {
        defaultValue: { value: 'true' },
        description: 'Whether to lock the scroll.',
        name: 'lockScroll',
        required: false,
        type: { name: 'boolean' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXPopover',
    props: {
      trigger: {
        defaultValue: null,
        description: 'Trigger element',
        name: 'trigger',
        required: true,
        type: { name: 'ReactElement<any, string | JSXElementConstructor<any>>' },
      },
      triggerMode: {
        defaultValue: { value: "'click'" },
        description: "Trigger mode, can be one of the following: 'click' | 'hover' | 'focus'",
        name: 'triggerMode',
        required: false,
        type: { name: 'TTriggerMode | TTriggerMode[]' },
      },
      placement: {
        defaultValue: { value: "'BlockStart'" },
        description:
          "Placement of the popover relative to the trigger element, the value can be one of the following:\n'BlockStart' | 'BlockStart-Start' | 'BlockStart-End' | 'BlockEnd' | 'BlockEnd-Start' | 'BlockEnd-End' | 'InlineStart' | 'InlineStart-Start' | 'InlineStart-End' | 'InlineEnd' | 'InlineEnd-Start' | 'InlineEnd-End'",
        name: 'placement',
        required: false,
        type: { name: 'TPopoverPlacement' },
      },
      root: {
        defaultValue: { value: 'null' },
        description:
          'Root element of the popover, default is null, which means the popover will be rendered in the body element',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the popover is open',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback when the popover is open or closed',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      showArrow: {
        defaultValue: { value: 'false' },
        description: 'Whether to show arrow',
        name: 'showArrow',
        required: false,
        type: { name: 'boolean' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus popover when open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether to dismiss the popover when click outside',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      autoFlip: {
        defaultValue: { value: 'false' },
        description: 'Whether to flip the popover when it is out of the viewport',
        name: 'autoFlip',
        required: false,
        type: { name: 'boolean' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the popover',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Custom minimum width of the popover.',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Custom maximum width of the popover.',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      height: {
        defaultValue: null,
        description: 'Custom height of the popover',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Custom minimum height of the popover.',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Custom maximum height of the popover.',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      backgroundColor: {
        defaultValue: { value: "'UISheetFlat3'" },
        description: 'Background color of the popover',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      zIndex: {
        defaultValue: { value: '2200' },
        description: 'Z-index of the popover',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      offsetOptions: {
        defaultValue: null,
        description: 'Offset between the trigger element and the popover',
        name: 'offsetOptions',
        required: false,
        type: { name: 'OffsetOptions' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXPopoverMock',
    props: {
      trigger: {
        defaultValue: null,
        description: 'Trigger element',
        name: 'trigger',
        required: true,
        type: { name: 'ReactElement<any, string | JSXElementConstructor<any>>' },
      },
      triggerMode: {
        defaultValue: { value: "'click'" },
        description: "Trigger mode, can be one of the following: 'click' | 'hover' | 'focus'",
        name: 'triggerMode',
        required: false,
        type: { name: 'TTriggerMode | TTriggerMode[]' },
      },
      placement: {
        defaultValue: { value: "'BlockStart'" },
        description:
          "Placement of the popover relative to the trigger element, the value can be one of the following:\n'BlockStart' | 'BlockStart-Start' | 'BlockStart-End' | 'BlockEnd' | 'BlockEnd-Start' | 'BlockEnd-End' | 'InlineStart' | 'InlineStart-Start' | 'InlineStart-End' | 'InlineEnd' | 'InlineEnd-Start' | 'InlineEnd-End'",
        name: 'placement',
        required: false,
        type: { name: 'TPopoverPlacement' },
      },
      root: {
        defaultValue: { value: 'null' },
        description:
          'Root element of the popover, default is null, which means the popover will be rendered in the body element',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the popover is open',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback when the popover is open or closed',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      showArrow: {
        defaultValue: { value: 'false' },
        description: 'Whether to show arrow',
        name: 'showArrow',
        required: false,
        type: { name: 'boolean' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus popover when open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether to dismiss the popover when click outside',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      autoFlip: {
        defaultValue: { value: 'false' },
        description: 'Whether to flip the popover when it is out of the viewport',
        name: 'autoFlip',
        required: false,
        type: { name: 'boolean' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the popover',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Custom minimum width of the popover.',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Custom maximum width of the popover.',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      height: {
        defaultValue: null,
        description: 'Custom height of the popover',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Custom minimum height of the popover.',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Custom maximum height of the popover.',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      backgroundColor: {
        defaultValue: { value: "'UISheetFlat3'" },
        description: 'Background color of the popover',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      zIndex: {
        defaultValue: { value: '2200' },
        description: 'Z-index of the popover',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      offsetOptions: {
        defaultValue: null,
        description: 'Offset between the trigger element and the popover',
        name: 'offsetOptions',
        required: false,
        type: { name: 'OffsetOptions' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXRadio',
    props: {
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the radio.',
        name: 'sizePreset',
        required: false,
        type: { name: '"large" | "small"' },
      },
      name: {
        defaultValue: null,
        description:
          'Name of the data that the radio is associated with.\nRadios with the same name are grouped and control the same set of data.',
        name: 'name',
        required: true,
        type: { name: 'string' },
      },
      value: {
        defaultValue: null,
        description:
          'Value that the radio option represents.\nThis should be unique for all radios with the same name.',
        name: 'value',
        required: true,
        type: { name: 'string' },
      },
      id: {
        defaultValue: null,
        description: 'Identifier for the radio input.',
        name: 'id',
        required: false,
        type: { name: 'string' },
      },
      checked: {
        defaultValue: null,
        description:
          "Controls the checking state of the radio.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'checked',
        required: false,
        type: { name: 'boolean' },
      },
      defaultChecked: {
        defaultValue: null,
        description: 'Controls the default checking state of the radio.\nUses this prop in an uncontrolled mode.',
        name: 'defaultChecked',
        required: false,
        type: { name: 'boolean' },
      },
      onChange: {
        defaultValue: null,
        description:
          "Change event handler of the radio.\nUses this prop with 'checked' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: { name: '((e: ChangeEvent<HTMLInputElement>, checked: boolean) => void)' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the radio is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the radio is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      backgroundColor: {
        defaultValue: null,
        description: 'Custom background color of the radio.',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSegmentedControl',
    props: {
      items: {
        defaultValue: null,
        description: 'Array of segment props data.',
        name: 'items',
        required: true,
        type: { name: 'TUXSegmentedItemProps[]' },
      },
      activeKey: {
        defaultValue: null,
        description: 'Specify the current active segment by key.',
        name: 'activeKey',
        required: false,
        type: { name: 'string' },
      },
      defaultActiveKey: {
        defaultValue: null,
        description: 'Specify the initial active segment.',
        name: 'defaultActiveKey',
        required: false,
        type: { name: 'string' },
      },
      sizePreset: {
        defaultValue: { value: "'small'" },
        description: 'Preset size of the segment.',
        name: 'sizePreset',
        required: false,
        type: { name: '"tiny" | "small"' },
      },
      shapePreset: {
        defaultValue: { value: "'capsule'" },
        description: 'Preset shape of the segment.',
        name: 'shapePreset',
        required: false,
        type: { name: '"capsule" | "rectangle"' },
      },
      fitContent: {
        defaultValue: { value: 'true' },
        description: 'Whether the segment width to fit content instead of equal width.',
        name: 'fitContent',
        required: false,
        type: { name: 'boolean' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Whether the segment is disabled.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the segmented control.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      onChange: {
        defaultValue: null,
        description: 'Callback triggered when a segment is switched.',
        name: 'onChange',
        required: false,
        type: { name: '((activeKey: string) => void)' },
      },
      onItemClick: {
        defaultValue: null,
        description: 'Callback triggered when a segment is clicked.',
        name: 'onItemClick',
        required: false,
        type: { name: '((event: MouseEvent<HTMLButtonElement, MouseEvent>, key: string) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSegment',
    props: {
      itemKey: {
        defaultValue: null,
        description: 'Unique identifier for the segment.',
        name: 'itemKey',
        required: true,
        type: { name: 'string' },
      },
      title: {
        defaultValue: null,
        description: 'Title of the segment.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      subtitle: {
        defaultValue: null,
        description: 'Subtitle of the segment, only available when sizePreset = "small".',
        name: 'subtitle',
        required: false,
        type: { name: 'string' },
      },
      leading: {
        defaultValue: null,
        description: 'Custom content before the title.',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailing: {
        defaultValue: null,
        description: 'Custom content after the title.',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Whether the segment is disabled.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      selected: {
        defaultValue: null,
        description: 'Internal prop, no need to set.',
        name: 'selected',
        required: true,
        type: { name: 'boolean' },
      },
      sizePreset: {
        defaultValue: null,
        description: 'Internal prop, no need to set.',
        name: 'sizePreset',
        required: false,
        type: { name: '"tiny" | "small"' },
      },
      onClick: {
        defaultValue: null,
        description: 'Internal prop, no need to set.',
        name: 'onClick',
        required: false,
        type: { name: '((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSelect',
    props: {
      fitContent: {
        defaultValue: { value: 'false' },
        description: 'Whether the width of select follows the content.',
        name: 'fitContent',
        required: false,
        type: { name: 'boolean' },
      },
      placeholder: {
        defaultValue: null,
        description: 'Placeholder text to prompt user select.',
        name: 'placeholder',
        required: false,
        type: { name: 'string' },
      },
      readOnly: {
        defaultValue: { value: 'false' },
        description: 'Whether the select is read-only.',
        name: 'readOnly',
        required: false,
        type: { name: 'boolean' },
      },
      inline: {
        defaultValue: { value: 'false' },
        description: 'Inline mode, embedded within other components.',
        name: 'inline',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Callback event triggered when the select box is clicked.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the input, corresponding to different heights.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "tiny" | "medium" | "large"' },
      },
      value: {
        defaultValue: null,
        description: "Value of the input.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon of the input.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the input is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the input is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback when the popover is open or closed',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      configForAll: {
        defaultValue: null,
        description: 'config for all items in the menu',
        name: 'configForAll',
        required: false,
        type: { name: 'TConfigForAll' },
      },
      options: {
        defaultValue: null,
        description: '',
        name: 'options',
        required: true,
        type: { name: 'TUXSelectOptionProps[]' },
      },
      formatDisplayText: {
        defaultValue: null,
        description: 'Custom display text in select',
        name: 'formatDisplayText',
        required: false,
        type: { name: '((selectedOption?: TUXSelectValueOptionProps) => string)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSelectBox',
    props: {
      fitContent: {
        defaultValue: { value: 'false' },
        description: 'Whether the width of select follows the content.',
        name: 'fitContent',
        required: false,
        type: { name: 'boolean' },
      },
      placeholder: {
        defaultValue: null,
        description: 'Placeholder text to prompt user select.',
        name: 'placeholder',
        required: false,
        type: { name: 'string' },
      },
      readOnly: {
        defaultValue: { value: 'false' },
        description: 'Whether the select is read-only.',
        name: 'readOnly',
        required: false,
        type: { name: 'boolean' },
      },
      inline: {
        defaultValue: { value: 'false' },
        description: 'Inline mode, embedded within other components.',
        name: 'inline',
        required: false,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Callback event triggered when the select box is clicked.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      value: {
        defaultValue: null,
        description: "Value of the input.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the input is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon of the input.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the input is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the input, corresponding to different heights.',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "tiny" | "medium" | "large"' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSeparator',
    props: {
      thickness: {
        defaultValue: { value: "'thin'" },
        description: 'Preset thickness of the separator.',
        name: 'thickness',
        required: false,
        type: { name: '"thin" | "thick"' },
      },
      direction: {
        defaultValue: { value: "'horizontal'" },
        description: 'Direction of the separator.',
        name: 'direction',
        required: false,
        type: { name: '"horizontal" | "vertical"' },
      },
      height: {
        defaultValue: null,
        description: 'Custom height of the separator.',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Custom width of the separator.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      color: {
        defaultValue: null,
        description: 'Custom color of the separator.',
        name: 'color',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSheet',
    props: {
      position: {
        defaultValue: { value: '"bottom"' },
        description: 'Direction in which the sheet is displayed.',
        name: 'position',
        required: false,
        type: { name: '"bottom" | "left" | "right"' },
      },
      heightModePreset: {
        defaultValue: { value: '"auto"' },
        description: 'Preset height modes of the sheet if position = "bottom".',
        name: 'heightModePreset',
        required: false,
        type: { name: '"auto" | "fixed"' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether clicking the overlay closes the sheet.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      height: {
        defaultValue: null,
        description: 'Height of the sheet, only valid if position = "bottom"',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Minimum height of the sheet, only valid if position = "bottom"',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Maximum height of the sheet, only valid if position = "bottom"',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Width of the sheet, only valid if position = "left" or "right"',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Minimum width of the sheet, only valid if position = "left" or "right"',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Maximum width of the sheet, only valid if position = "left" or "right"',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      marginBottom: {
        defaultValue: null,
        description: 'Margin-bottom value of the sheet.',
        name: 'marginBottom',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2000' },
        description: 'Z-index of the sheet.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      overlayBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the overlay.',
        name: 'overlayBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      sheetBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the sheet container.',
        name: 'sheetBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSingleSelectSheet',
    props: {
      defaultValue: {
        defaultValue: null,
        description: 'Specified initial checked value in uncontrolled mode',
        name: 'defaultValue',
        required: false,
        type: { name: 'string' },
      },
      value: {
        defaultValue: null,
        description: 'Specified checked value in controlled mode',
        name: 'value',
        required: false,
        type: { name: 'string' },
      },
      title: {
        defaultValue: null,
        description: 'Main title of the NavBar in the Sheet.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      showNavBarSeparator: {
        defaultValue: { value: 'false' },
        description: 'Whether to show separator of the NavBar',
        name: 'showNavBarSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      options: {
        defaultValue: null,
        description:
          'Array of single select option data.\nTUXSingleSelectOptionProps: { title: string, description?: string, name: string, value: string, disabled?: boolean}',
        name: 'options',
        required: true,
        type: { name: 'TUXSingleSelectOptionProps[]' },
      },
      onChange: {
        defaultValue: null,
        description: 'Callback event triggered when the checked value changes.',
        name: 'onChange',
        required: false,
        type: { name: '((value?: string) => void)' },
      },
      onItemClick: {
        defaultValue: null,
        description: 'Callback event triggered when the item clicked.',
        name: 'onItemClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>, value?: string) => void)' },
      },
      position: {
        defaultValue: { value: '"bottom"' },
        description: 'Direction in which the sheet is displayed.',
        name: 'position',
        required: false,
        type: { name: '"bottom" | "left" | "right"' },
      },
      heightModePreset: {
        defaultValue: { value: '"auto"' },
        description: 'Preset height modes of the sheet if position = "bottom".',
        name: 'heightModePreset',
        required: false,
        type: { name: '"auto" | "fixed"' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether clicking the overlay closes the sheet.',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      height: {
        defaultValue: null,
        description: 'Height of the sheet, only valid if position = "bottom"',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: null,
        description: 'Minimum height of the sheet, only valid if position = "bottom"',
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: null,
        description: 'Maximum height of the sheet, only valid if position = "bottom"',
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: null,
        description: 'Width of the sheet, only valid if position = "left" or "right"',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      minWidth: {
        defaultValue: null,
        description: 'Minimum width of the sheet, only valid if position = "left" or "right"',
        name: 'minWidth',
        required: false,
        type: { name: 'string' },
      },
      maxWidth: {
        defaultValue: null,
        description: 'Maximum width of the sheet, only valid if position = "left" or "right"',
        name: 'maxWidth',
        required: false,
        type: { name: 'string' },
      },
      marginBottom: {
        defaultValue: null,
        description: 'Margin-bottom value of the sheet.',
        name: 'marginBottom',
        required: false,
        type: { name: 'string' },
      },
      zIndex: {
        defaultValue: { value: '2000' },
        description: 'Z-index of the sheet.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      overlayBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the overlay.',
        name: 'overlayBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      sheetBackgroundColor: {
        defaultValue: null,
        description: 'Background color of the sheet container.',
        name: 'sheetBackgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the floating component is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Event callback triggered when the floating component visible state should change.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus floating element when overlay open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root node to which the floating component are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      shouldCloseOnOutsideClick: {
        defaultValue: null,
        description:
          'Pass function to customize condition to close the floating component when clicking outside.\nReference: https://floating-ui.com/docs/usedismiss#outsidepress',
        name: 'shouldCloseOnOutsideClick',
        required: false,
        type: { name: '((event: MouseEvent) => boolean)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSkeleton',
    props: {
      width: {
        defaultValue: { value: '"64px"' },
        description: 'Width of the skeleton.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      height: {
        defaultValue: { value: '"64px"' },
        description: 'Height of the skeleton.',
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      borderRadius: {
        defaultValue: { value: '"2px"' },
        description: 'Border radius of the skeleton.',
        name: 'borderRadius',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSpinner',
    props: {
      sizePreset: {
        defaultValue: { value: '"small"' },
        description: 'Preset size of the spinner',
        name: 'sizePreset',
        required: false,
        type: { name: '"small" | "medium" | "large" | "huge"' },
      },
      thickness: {
        defaultValue: { value: '"regular"' },
        description: 'Preset thickness of the spinner',
        name: 'thickness',
        required: false,
        type: { name: '"regular" | "thin"' },
      },
      size: {
        defaultValue: null,
        description: 'Size of the spinner',
        name: 'size',
        required: false,
        type: { name: 'number' },
      },
      color: {
        defaultValue: null,
        description: 'Color of the spinner',
        name: 'color',
        required: false,
        type: { name: 'TColorWithToken' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXStatusView',
    props: {
      title: {
        defaultValue: null,
        description: 'Title of the status view.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      message: {
        defaultValue: null,
        description: 'Message of the status view.',
        name: 'message',
        required: false,
        type: { name: 'ReactNode' },
      },
      image: {
        defaultValue: null,
        description: 'Top image of the status view(this can usually be a banner or an illustration).',
        name: 'image',
        required: false,
        type: { name: 'ReactNode' },
      },
      fitContent: {
        defaultValue: { value: 'false' },
        description: "Whether the status view's height fit its content or not.",
        name: 'fitContent',
        required: false,
        type: { name: 'boolean' },
      },
      footerButton: {
        defaultValue: null,
        description:
          'The footer button of the status view.\nTUXStatusViewFooterButtonProps = {\n  text?: string;\n  themePreset?: "primary" | "secondary";\n  shapePreset?: "normal" | "capsule" | "borderless";\n  disabled?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n}',
        name: 'footerButton',
        required: false,
        type: { name: 'TUXStatusViewFooterButtonProps' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXSwitch',
    props: {
      sizePreset: {
        defaultValue: { value: '"large"' },
        description: 'Preset sizes of the switch.',
        name: 'sizePreset',
        required: false,
        type: { name: '"large" | "small"' },
      },
      name: {
        defaultValue: null,
        description:
          'Name of the data that the switch is associated with.\nSwitches with the same name are grouped and control the same set of data.',
        name: 'name',
        required: true,
        type: { name: 'string' },
      },
      value: {
        defaultValue: null,
        description: 'Value that the switch controls.\nThis should be unique for all switches with the same name.',
        name: 'value',
        required: true,
        type: { name: 'string' },
      },
      id: {
        defaultValue: null,
        description: 'Identifier for the switch input.',
        name: 'id',
        required: false,
        type: { name: 'string' },
      },
      checked: {
        defaultValue: null,
        description:
          "Controls the checking state of the switch.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'checked',
        required: false,
        type: { name: 'boolean' },
      },
      defaultChecked: {
        defaultValue: null,
        description: 'Controls the default checking state of the switch.\nUses this prop in an uncontrolled mode.',
        name: 'defaultChecked',
        required: false,
        type: { name: 'boolean' },
      },
      onChange: {
        defaultValue: null,
        description:
          "Change event handler of the switch.\nUses this prop with 'checked' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: { name: '((e: ChangeEvent<HTMLInputElement>, checked: boolean) => void)' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the switch is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      loading: {
        defaultValue: null,
        description: 'Whether the switch is in a loading state.',
        name: 'loading',
        required: false,
        type: { name: 'boolean' },
      },
      backgroundColor: {
        defaultValue: null,
        description: 'Custom background color of the checked switch.',
        name: 'backgroundColor',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTabBar',
    props: {
      items: {
        defaultValue: null,
        description: 'Array of tab bar item props data.',
        name: 'items',
        required: true,
        type: { name: 'TUXTabBarItemProps[]' },
      },
      activeKey: {
        defaultValue: null,
        description: 'Specify the current active tab bar item by key.',
        name: 'activeKey',
        required: false,
        type: { name: 'string' },
      },
      defaultActiveKey: {
        defaultValue: null,
        description: 'Specify the initial active tab bar item.',
        name: 'defaultActiveKey',
        required: false,
        type: { name: 'string' },
      },
      fitContent: {
        defaultValue: { value: 'false' },
        description: 'Whether the tab bar item width to fit content instead of equal width.',
        name: 'fitContent',
        required: false,
        type: { name: 'boolean' },
      },
      fixedSpacing: {
        defaultValue: { value: 'false' },
        description: 'Whether to specify fixed spacing in fit content display mode.',
        name: 'fixedSpacing',
        required: false,
        type: { name: 'boolean' },
      },
      showSeparator: {
        defaultValue: { value: 'true' },
        description: 'Whether to show the separator.',
        name: 'showSeparator',
        required: false,
        type: { name: 'boolean' },
      },
      showFadingEdge: {
        defaultValue: { value: 'true' },
        description: 'Whether to show the fading edge.',
        name: 'showFadingEdge',
        required: false,
        type: { name: 'boolean' },
      },
      onChange: {
        defaultValue: null,
        description: 'Callback triggered when a tab item item is switched.',
        name: 'onChange',
        required: false,
        type: { name: '((activeKey: string) => void)' },
      },
      onItemClick: {
        defaultValue: null,
        description: 'Callback triggered when a tab item is clicked.',
        name: 'onItemClick',
        required: false,
        type: { name: '((event: MouseEvent<HTMLButtonElement, MouseEvent>, key: string) => void)' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTabBarItem',
    props: {
      itemKey: {
        defaultValue: null,
        description: 'Unique identifier for the tab bar item.',
        name: 'itemKey',
        required: true,
        type: { name: 'string' },
      },
      title: {
        defaultValue: null,
        description: 'Title of the tab bar item.',
        name: 'title',
        required: false,
        type: { name: 'string' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Icon pure display or before the title.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      showTrailingArrow: {
        defaultValue: { value: 'false' },
        description: 'Whether to show the arrow icon after the title.',
        name: 'showTrailingArrow',
        required: false,
        type: { name: 'boolean' },
      },
      disabled: {
        defaultValue: { value: 'false' },
        description: 'Whether the tab bar item is disabled.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      selected: {
        defaultValue: null,
        description: 'Internal prop, no need to set.',
        name: 'selected',
        required: true,
        type: { name: 'boolean' },
      },
      fitContent: {
        defaultValue: null,
        description: 'Internal prop, no need to set.',
        name: 'fitContent',
        required: true,
        type: { name: 'boolean' },
      },
      onClick: {
        defaultValue: null,
        description: 'Internal prop, no need to set.',
        name: 'onClick',
        required: false,
        type: { name: '((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTag',
    props: {
      text: {
        defaultValue: null,
        description: 'The text content inside the tag.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      themePreset: {
        defaultValue: { value: '"primary"' },
        description: 'Preset themes of the tag.',
        name: 'themePreset',
        required: false,
        type: { name: '"primary" | "neutral" | "subtle" | "overlayWhite" | "overlayGray"' },
      },
      textSizePreset: {
        defaultValue: { value: '"P2"' },
        description: 'Preset sizes of the tag, corresponding to different heights.',
        name: 'textSizePreset',
        required: false,
        type: { name: 'TagTextSizePreset' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the tag is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Icon displayed before the text.',
        name: 'leadingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      trailingIcon: {
        defaultValue: null,
        description: 'Icon displayed after the text.',
        name: 'trailingIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      onClick: {
        defaultValue: null,
        description: 'Click event handler for the tag, set this to make the tag to be interactive.',
        name: 'onClick',
        required: false,
        type: { name: '((e: MouseEvent<HTMLDivElement, MouseEvent>) => void)' },
      },
      paddingBlock: {
        defaultValue: null,
        description: 'Custom padding-block of the tag.',
        name: 'paddingBlock',
        required: false,
        type: { name: 'string' },
      },
      paddingInline: {
        defaultValue: null,
        description: 'Custom padding-inline of the tag.',
        name: 'paddingInline',
        required: false,
        type: { name: 'string' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXText',
    props: {
      typographyPreset: {
        defaultValue: null,
        description: 'Typography preset of tux.',
        name: 'typographyPreset',
        required: false,
        type: { name: 'TTUXTypographyPreset' },
      },
      font: {
        defaultValue: null,
        description: 'Font family of the text.',
        name: 'font',
        required: false,
        type: { name: '"TikTokFont" | "TikTokDisplayFont"' },
      },
      size: {
        defaultValue: null,
        description: 'Font size in pixels.',
        name: 'size',
        required: false,
        type: { name: 'number' },
      },
      color: {
        defaultValue: null,
        description: 'Color of the text.',
        name: 'color',
        required: false,
        type: { name: 'TColorWithToken' },
      },
      weight: {
        defaultValue: null,
        description: 'Weight of the font.',
        name: 'weight',
        required: false,
        type: { name: 'number' },
      },
      align: {
        defaultValue: null,
        description: 'Aligns text based on the parent container.',
        name: 'align',
        required: false,
        type: { name: '"center" | "start" | "end"' },
      },
      textDisplay: {
        defaultValue: null,
        description: 'The text overflow behavior.',
        name: 'textDisplay',
        required: false,
        type: { name: '"truncate" | "lineBreak"' },
      },
      italic: {
        defaultValue: null,
        description: 'Applies the italic font style to the content.',
        name: 'italic',
        required: false,
        type: { name: 'boolean' },
      },
      underline: {
        defaultValue: null,
        description: 'Applies the underline text decoration to the content.',
        name: 'underline',
        required: false,
        type: { name: 'boolean' },
      },
      strikethrough: {
        defaultValue: null,
        description: 'Applies the strikethrough text decoration to the content.',
        name: 'strikethrough',
        required: false,
        type: { name: 'boolean' },
      },
      as: {
        defaultValue: { value: 'span' },
        description: "Container element tag, default tag is 'span'",
        name: 'as',
        required: false,
        type: { name: '"div" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "label" | "p" | "pre" | "span"' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTextArea',
    props: {
      value: {
        defaultValue: null,
        description: "Value of the textarea.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      defaultValue: {
        defaultValue: null,
        description: 'Default initial value of the textarea.\nUses this prop in an uncontrolled mode.',
        name: 'defaultValue',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      onChange: {
        defaultValue: null,
        description:
          "Change event handler of the textarea.\nUses this prop with 'value' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: {
          name: '(((e: ChangeEvent<HTMLTextAreaElement>, value: string) => void) & ChangeEventHandler<HTMLTextAreaElement>)',
        },
      },
      placeholder: {
        defaultValue: null,
        description: 'A short hint that describes the expected value of the textarea.',
        name: 'placeholder',
        required: false,
        type: { name: 'string' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the textarea is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      invalid: {
        defaultValue: null,
        description: 'Whether the textarea is in an error state.\nWhether the input footer is in an error state.',
        name: 'invalid',
        required: false,
        type: { name: 'boolean' },
      },
      trailing: {
        defaultValue: null,
        description: 'Custom trailing area of the textarea.',
        name: 'trailing',
        required: false,
        type: { name: 'ReactNode' },
      },
      autoSize: {
        defaultValue: { value: 'true' },
        description: 'Whether the textarea can scalable or not.',
        name: 'autoSize',
        required: false,
        type: { name: 'boolean' },
      },
      height: {
        defaultValue: { value: '"88px"' },
        description: "The height of the textarea. (applied when autoSize is 'false')",
        name: 'height',
        required: false,
        type: { name: 'string' },
      },
      minHeight: {
        defaultValue: { value: '"88px"' },
        description: "The minimum height of the textarea. (applied when autoSize is 'true')",
        name: 'minHeight',
        required: false,
        type: { name: 'string' },
      },
      maxHeight: {
        defaultValue: { value: '"200px"' },
        description: "The maximum height of the textarea. (applied when autoSize is 'true')",
        name: 'maxHeight',
        required: false,
        type: { name: 'string' },
      },
      width: {
        defaultValue: { value: '"358px"' },
        description: 'Custom width of the textarea.',
        name: 'width',
        required: false,
        type: { name: 'string' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
      message: {
        defaultValue: null,
        description: 'Message of the input footer.',
        name: 'message',
        required: false,
        type: { name: 'string' },
      },
      maxLengthExceededMessage: {
        defaultValue: null,
        description: 'Message displayed when counterLength exceeds counterMaxLength.',
        name: 'maxLengthExceededMessage',
        required: false,
        type: { name: 'string' },
      },
      messageIcon: {
        defaultValue: null,
        description: 'Custom message icon of the input footer, if set to null, there is no message icon',
        name: 'messageIcon',
        required: false,
        type: { name: 'ReactNode' },
      },
      showCounter: {
        defaultValue: null,
        description: 'Whether to show the counter or not.',
        name: 'showCounter',
        required: false,
        type: { name: 'boolean' },
      },
      counterLength: {
        defaultValue: null,
        description: 'The length of the input value for the counter.',
        name: 'counterLength',
        required: false,
        type: { name: 'number' },
      },
      counterMaxLength: {
        defaultValue: null,
        description: 'The max length of the input value for the counter.',
        name: 'counterMaxLength',
        required: false,
        type: { name: 'number' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTextAreaCore',
    props: {
      value: {
        defaultValue: null,
        description: "Value of the textarea.\nUses this prop with 'onChange' to make it in a controlled mode.",
        name: 'value',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      defaultValue: {
        defaultValue: null,
        description: 'Default initial value of the textarea.\nUses this prop in an uncontrolled mode.',
        name: 'defaultValue',
        required: false,
        type: { name: 'string | (string & readonly string[])' },
      },
      onChange: {
        defaultValue: null,
        description:
          "Change event handler of the textarea.\nUses this prop with 'value' to make it in a controlled mode.",
        name: 'onChange',
        required: false,
        type: { name: '(((e: ChangeEvent<HTMLTextAreaElement>) => void) & ChangeEventHandler<HTMLTextAreaElement>)' },
      },
      disabled: {
        defaultValue: null,
        description: 'Whether the textarea is in a disabled(not interactive) state.',
        name: 'disabled',
        required: false,
        type: { name: 'boolean' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTopToast',
    props: {
      zIndex: {
        defaultValue: { value: '2300' },
        description: 'Z-index of the toast.',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      root: {
        defaultValue: null,
        description: 'Specifies the root to which the toast are attached.',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      topSafeAreaHeight: {
        defaultValue: null,
        description: 'Custom height of the top safe area, usually used on mobile devices.',
        name: 'topSafeAreaHeight',
        required: false,
        type: { name: 'string' },
      },
      textDirection: {
        defaultValue: null,
        description: 'The text direction for the specific scope.',
        name: 'textDirection',
        required: false,
        type: { name: '"ltr" | "rtl"' },
      },
      text: {
        defaultValue: null,
        description: 'Text content of the toast.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      leading: {
        defaultValue: null,
        description: 'Custom Area before the toast text.',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Controls whether the toast is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback triggered when the toast is shown or hidden.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
    },
    methods: {
      show: {
        description: '',
        docblock:
          "@public Static method to show toasts.\n@param config - Toast config:\n{\ntext?: string;\nleading?: React.ReactNode;\ndisplayMode?: 'single' | 'replace' | 'multiple';\nduration?: number;\ntopSafeAreaHeight?: string;\nzIndex?: number;\ntextDirection?: 'ltr' |'rtl';\n}.\n@returns",
        modifiers: [],
        params: [{ description: null, name: 'config', type: { name: 'TUXTopToastConfig' } }],
        returns: null,
      },
      destroy: {
        description: '',
        docblock: '@public Static method to destroy toasts.\n@returns void',
        modifiers: [],
        params: [],
        returns: { description: 'void', type: 'void' },
      },
    },
  },
  {
    displayName: 'TUXToastPortal',
    props: {
      id: { defaultValue: null, description: '', name: 'id', required: false, type: { name: 'string' } },
      root: {
        defaultValue: null,
        description: '',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      theme: {
        defaultValue: null,
        description: 'The theme for the specific scope.',
        name: 'theme',
        required: false,
        type: { name: '"light" | "dark"' },
      },
      textDirection: {
        defaultValue: null,
        description: 'The text direction for the specific scope.',
        name: 'textDirection',
        required: false,
        type: { name: '"ltr" | "rtl"' },
      },
      platform: {
        defaultValue: null,
        description: 'The platform information.',
        name: 'platform',
        required: false,
        type: { name: '"iOS" | "android" | "desktop"' },
      },
      className: {
        defaultValue: null,
        description: 'CSS class applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'className',
        required: false,
        type: { name: 'string' },
      },
      style: {
        defaultValue: null,
        description:
          'Inline CSS styles applied to the component. This can be used to provide additional styles (eg: margin).',
        name: 'style',
        required: false,
        type: { name: 'CSSProperties' },
      },
    },
    methods: {},
  },
  { displayName: 'TUXToastQueue', props: {}, methods: {} },
  {
    displayName: 'TUXTopToastView',
    props: {
      text: {
        defaultValue: null,
        description: 'Text content of the toast.',
        name: 'text',
        required: false,
        type: { name: 'string' },
      },
      leading: {
        defaultValue: null,
        description: 'Custom Area before the toast text.',
        name: 'leading',
        required: false,
        type: { name: 'ReactNode' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Controls whether the toast is visible.',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback triggered when the toast is shown or hidden.',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTooltip',
    props: {
      trigger: {
        defaultValue: null,
        description: 'Trigger element',
        name: 'trigger',
        required: true,
        type: { name: 'ReactElement<any, string | JSXElementConstructor<any>>' },
      },
      triggerMode: {
        defaultValue: { value: "['hover', 'focus']" },
        description: "Trigger mode, can be one of the following: 'click' | 'hover' | 'focus'",
        name: 'triggerMode',
        required: false,
        type: { name: 'TTriggerMode | TTriggerMode[]' },
      },
      placement: {
        defaultValue: { value: "'BlockStart'" },
        description:
          "Placement of the tooltip relative to the trigger element, the value can be one of the following:\n'BlockStart' | 'BlockStart-Start' | 'BlockStart-End' | 'BlockEnd' | 'BlockEnd-Start' | 'BlockEnd-End' | 'InlineStart' | 'InlineStart-Start' | 'InlineStart-End' | 'InlineEnd' | 'InlineEnd-Start' | 'InlineEnd-End'",
        name: 'placement',
        required: false,
        type: { name: 'TPopoverPlacement' },
      },
      root: {
        defaultValue: { value: 'null' },
        description:
          'Root element of the tooltip, default is null, which means the tooltip will be rendered in the body element',
        name: 'root',
        required: false,
        type: { name: 'HTMLElement | MutableRefObject<HTMLElement | null> | null' },
      },
      visible: {
        defaultValue: { value: 'false' },
        description: 'Whether the tooltip is open',
        name: 'visible',
        required: false,
        type: { name: 'boolean' },
      },
      onVisibleChange: {
        defaultValue: null,
        description: 'Callback when the tooltip is open or closed',
        name: 'onVisibleChange',
        required: false,
        type: { name: '((visible: boolean) => void)' },
      },
      showArrow: {
        defaultValue: { value: 'false' },
        description: 'Whether to show arrow',
        name: 'showArrow',
        required: false,
        type: { name: 'boolean' },
      },
      autoFocus: {
        defaultValue: { value: 'false' },
        description: 'Whether to auto focus tooltip when open',
        name: 'autoFocus',
        required: false,
        type: { name: 'boolean' },
      },
      closeOnOutsideClick: {
        defaultValue: { value: 'true' },
        description: 'Whether to dismiss the tooltip when click outside',
        name: 'closeOnOutsideClick',
        required: false,
        type: { name: 'boolean' },
      },
      autoFlip: {
        defaultValue: { value: 'false' },
        description: 'Whether to flip the tooltip when it is out of the viewport',
        name: 'autoFlip',
        required: false,
        type: { name: 'boolean' },
      },
      zIndex: {
        defaultValue: { value: '2200' },
        description: 'Z-index of the tooltip',
        name: 'zIndex',
        required: false,
        type: { name: 'number' },
      },
      offsetOptions: {
        defaultValue: null,
        description: 'Gap between the trigger element and the tooltip',
        name: 'offsetOptions',
        required: false,
        type: { name: 'OffsetOptions' },
      },
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon, can be any svg icon',
        name: 'leadingIcon',
        required: false,
        type: { name: 'TLeadingElement' },
      },
      leadingIconSize: {
        defaultValue: { value: "'small'" },
        description: "Leading icon size, can be 'small' or 'large'",
        name: 'leadingIconSize',
        required: false,
        type: { name: '"small" | "large"' },
      },
      leading: {
        defaultValue: null,
        description: 'Leading content, can be image, Avatar and other elements, should support size or style props',
        name: 'leading',
        required: false,
        type: { name: 'TLeadingElement' },
      },
      text: { defaultValue: null, description: 'Text content', name: 'text', required: true, type: { name: 'string' } },
      showTrailingIcon: {
        defaultValue: null,
        description: 'Whether to show trailing icon',
        name: 'showTrailingIcon',
        required: false,
        type: { name: 'boolean' },
      },
      onContentClick: {
        defaultValue: null,
        description: 'Click event handler for the container.',
        name: 'onContentClick',
        required: false,
        type: { name: 'MouseEventHandler<HTMLDivElement>' },
      },
      testId: {
        defaultValue: null,
        description: 'The test id of the component, setting data-testid attribute.',
        name: 'testId',
        required: false,
        type: { name: 'string' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTooltipLeadingImage',
    props: {
      shapePreset: {
        defaultValue: null,
        description: '',
        name: 'shapePreset',
        required: false,
        type: { name: '"square" | "round"' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXTooltipContent',
    props: {
      leadingIcon: {
        defaultValue: null,
        description: 'Leading icon, can be any svg icon',
        name: 'leadingIcon',
        required: false,
        type: { name: 'TLeadingElement' },
      },
      leadingIconSize: {
        defaultValue: { value: "'small'" },
        description: "Leading icon size, can be 'small' or 'large'",
        name: 'leadingIconSize',
        required: false,
        type: { name: '"small" | "large"' },
      },
      leading: {
        defaultValue: null,
        description: 'Leading content, can be image, Avatar and other elements, should support size or style props',
        name: 'leading',
        required: false,
        type: { name: 'TLeadingElement' },
      },
      text: { defaultValue: null, description: 'Text content', name: 'text', required: true, type: { name: 'string' } },
      showTrailingIcon: {
        defaultValue: null,
        description: 'Whether to show trailing icon',
        name: 'showTrailingIcon',
        required: false,
        type: { name: 'boolean' },
      },
      onContentClick: {
        defaultValue: null,
        description: 'Click event handler for the container.',
        name: 'onContentClick',
        required: false,
        type: { name: 'MouseEventHandler<HTMLDivElement>' },
      },
    },
    methods: {},
  },
  {
    displayName: 'TUXWeekBar',
    props: {
      locale: { defaultValue: null, description: '', name: 'locale', required: false, type: { name: 'string' } },
    },
    methods: {},
  },
  { displayName: 'getWeekDays', props: {}, methods: {} },
];
